#!/usr/bin/env perl

use warnings;
use Data::Dumper;
use Net::SMTP;
use Getopt::Long qw(:config no_auto_abbrev no_ignore_case no_bundling);
use IO::Socket;
use Carp;
use File::Temp qw(tempfile);
no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';

sub cat($);
use subs 'die';
sub die {
	my (@args) = @_;
	$args[0] =~ s/^/$0: /mg if @args and $args[0];
	Carp::confess(@args);
}
sub pinfo {
	my (@args) = @_;
	$args[0] =~ s/^/$0: /mg if @args and $args[0];
	CORE::warn(@args);
}


$0 = "sendmail";
my $last_hdr_ref;
my @Headers;
my @sensitiveHeaders = qw/X-Getmail-Retrieved-From-Mailbox X-Gmail-Labels/;
my @sensitiveHeadersMarkerHeaders = qw/X-Claws-End-Special-Headers/;
my @notSensitiveHeaders = qw/X-Imap-Sender/;
my @pwent = (getpwuid $<);
my $Username = $pwent[0];
my ($UserGECOS, undef) = split/,/, $pwent[6];
my $FromRealName;
my $Maildomain = cat("/etc/mailname") || `domainname` || cat("/etc/domain") || `dnsdomainname` || "localhost"; $Maildomain =~ s/\n//;
my $MailFrom;
# use user-provided Sender or From header as MAIL FROM ?
my $Trust_Fromaddr = 0;
my $Relay_Addr = undef;
my $Relay_Port = undef;
my @recipient_headers = qw/To Cc Bcc/;
my $get_recipients_from_headers = 0;
my $single_dot_does_not_terminate_input = 0;
my $Auto_Qualify = 1;
my $relay_auto_mx = 0;
my $DebugSMTP = 0;
my $ProgressCounter = 0;
my $SaveSent;
my $SaveFailed;

my $UsageText = 'Options:
  --trust-fromaddr
    Accept user-supplied sender address (in Sender or From header) as envelope
    sender, otherwise get it from `-f´ parameter or put system username and 
    domain name together if `-f´ is missing. Default is --no-trust-fromaddr.
  
  --relay SERVER-ADDRESS[:PORT]
  
  --relay-auto-mx
    Find the first recipient\'s Mail eXchanger (DNS MX record)
    and relay the email via it.
    Note: SRV record lookup [RFC-6186] is not yet supported (TODO).
  
  --auto-qualify (default), --no-auto-qualify
    Add our own email domain to unqualified recipient names, ie:
    "To: joe" -> "To: joe@example.net"
  
  --domain DOMAIN
    Override system email domain which is otherwise got from /etc/maildomain, 
    or `domainname´ command.
  
  -f, --from ADDRESS
    Specify envelope sender address (MAIL FROM address)
    Can be overridden by --trust-fromaddr
  
  -F NAME
    Add or replace real name in `From´ header
  
  -t, -i, -ti
    BSD sendmail-compatible options.
    -t   Get the recipients from the input email To, Cc, Bcc headers.
    -i   Do not cease reading input email when encountering a single dot
         alone in a line.
  
  --debug
    Debug SMTP conversation
  
  --progress-counter
    Show a counter per second how much data was sent.
  
  --save-sent DIR
  --save-failed DIR
    Save sent/failed email in file in DIR directory.
';


# Split contracted option parameters: eg. "-FCronDaemon" to "-F" "CronDaemon"
@ARGV = map {if(/^-([^-bot])(.+)$/){ $1, $2; }else{ $_; }} @ARGV;

GetOptions(
	"trust-fromaddr!" => \$Trust_Fromaddr,
	"relay=s" => \$Relay_Addr,
	"relay-auto-mx" => \$relay_auto_mx,
	"auto-qualify!" => \$Auto_Qualify,
	"domain=s" => \$Maildomain,
	"f|from=s" => \$MailFrom,
	"F=s" => \$FromRealName,
	"t" => \$get_recipients_from_headers,
	"i|oi" => \$single_dot_does_not_terminate_input,
	"ti" => sub { $get_recipients_from_headers = 1; $single_dot_does_not_terminate_input = 1; },
	"o|oem|oep|oeq=s" => sub{},
	"bp|bs" => sub{ die "Option not supported: -bp\n"; },
	"smtp-user-env=s" => sub{ $SMTP_user = $ENV{$_[1]}; },
	"smtp-pass-env=s" => sub{ $SMTP_pass = $ENV{$_[1]}; },
	"debug!" => \$DebugSMTP,
	"progress-counter!" => \$ProgressCounter,
	"save-sent=s" => \$SaveSent,
	"save-failed=s" => \$SaveFailed,
) or die $UsageText;

if(not defined $MailFrom)
{
	$MailFrom = $Username . '@' . $Maildomain;
}

if(defined $Relay_Addr and $relay_auto_mx)
{
	die "Option --relay and --relay-auto-mx are mutually exclusive.\n";
}
if(not defined $Relay_Addr and not $relay_auto_mx)
{
	$Relay_Addr = "localhost";
}
if($get_recipients_from_headers and @ARGV)
{
	die "Option -t and recipient in cli arguments are mutually exclusive.\n";
}

my @recipients = @ARGV;


sub cat($)
{
	my $return;
	if(-r $_[0])
	{
		open my $fh, '<', $_[0];
		$return .= $_ while <$fh>;
		close $fh;
	}
	return $return;
}

sub extract_emailaddr($)
{
	local $_ = shift;
	my @return;
	
	while(
	 /^\s*,?\s*[^,]*?<([^\s\@""''<>,]+@[^\s\@""''<>,]+)>/m or
	 /^\s*,?\s*[^,]*?([^\s\@""''<>,]+@[^\s\@""''<>,]+)/m or
	 /^\s*,?\s*[""].*?[""]\s*<([^\s\@""''<>,]+@[^\s\@""''<>,]+)>/m or
	 /^\s*,?\s*[''].*?['']\s*<([^\s\@""''<>,]+@[^\s\@""''<>,]+)>/m
	)
	{
		#print STDERR Dumper {"before"=>$`,"match"=>$&,"address"=>$1,"after"=>$'};
		push @return, $1;
		$_ = $';
	}
	return wantarray ? @return : $return[0];
}

sub getheaders($)
{
	my $hname = lc shift;
	my @return;
	
	for my $hdr_ref (@Headers)
	{
		if(lc $hdr_ref->{"name"} eq $hname)
		{
			push @return, $hdr_ref->{"value"};
		}
	}
	return @return;
}

sub test_tcp_socket
{
    return 1 if socket(SOCKET, PF_INET, SOCK_STREAM, getprotobyname('tcp')) 
    	and connect(SOCKET, sockaddr_in($_[1], inet_aton($_[0])));
    return 0;
}



### BEGIN ###

my $SaveFD;
my $SaveTempFilename;
my $mailid = sprintf "%lx-%x", time, $$;
if($SaveFailed or $SaveSent)
{
	my $tmpdir = $SaveSent;
	$tmpdir = $SaveFailed if not $SaveSent;
	($SaveFD, $SaveTempFilename) = tempfile(".sendmail-$mailid-XXXX.eml", DIR=>$tmpdir);
}

# Read up headers
if(-t 0)
{
	pinfo "Reading headers...\n";
}

while(<STDIN>)
{
	print {$SaveFD} $_ if $SaveFD;
	
	if(/^\r?\n?$/)
	{
		# End of Headers
		last;
	}
	
	s/\r?\n?$//;
	
	if(my($hdr_name, $content) = /^(\S+?):[ ]?(.*)/)
	{
		my $hdr_name_pretty = $hdr_name;
		$hdr_name_pretty =~ s/[^-]*/\L\u$&/g;
		
		if($hdr_name_pretty ~~ @sensitiveHeadersMarkerHeaders)
		{
			# Clear all headers so far (except those which have to be preserved)
			@Headers = grep {my $h = lc $_->{"name"}; grep {$h eq lc $_} @notSensitiveHeaders} @Headers;
			next;
		}
		
		unless($hdr_name_pretty ~~ @sensitiveHeaders)
		{
			my $hdr_hash = { "name" => $hdr_name, "pretty_name" => $hdr_name_pretty, "value" => $content, };
			push @Headers, $hdr_hash;
			$last_hdr_ref = $hdr_hash;
		}
	}
	elsif(/^\s+(\S.*)/)
	{
		# it is a folded header
		$last_hdr_ref->{"value"} .= $1;
	}
}



if($Trust_Fromaddr)
{
	SEARCH_FROM_ADDR:
	for my $field (qw/Sender From/)
	{
		for my $hval (getheaders($field))
		{
			$MailFrom = extract_emailaddr($hval);
			# Count only the first occurrance
			last SEARCH_FROM_ADDR;
		}
	}
}

if(defined $FromRealName)
{
	# From field is passed on CLI, rewrite real name part
	my $fromrealname = $FromRealName;
	$fromrealname =~ s/[""]/\\$&/g;
	
	my @froms = getheaders("From");
	if(@froms)
	{
		my $addr = extract_emailaddr($froms[0]);
		my $new_from_header = sprintf "\"%s\" <%s>", $fromrealname, $addr;
		for my $hdr_ref (@Headers)
		{
			if(lc $hdr_ref->{"name"} eq "from")
			{
				$hdr_ref->{"value"} = $new_from_header;
				# Touch only the first 'From:' header
				last;
			}
		}
	}
	else
	{
		my $new_from_header = sprintf "\"%s\" <%s>", $fromrealname, $MailFrom;
		unshift @Headers, { "name" => "From", "pretty_name" => "From", "value" => $new_from_header, };
	}
}

sub smtp_die
{
	if($SaveFD)
	{
		close $SaveFD;
		my $SaveFilename = "$SaveFailed/$mailid.eml";
		pinfo "saving to $SaveFilename\n";
		system "mv", $SaveTempFilename, $SaveFilename;
	}
	
	my $smtp_msg = $smtp->message();
	$smtp_msg =~ s/\n*$//;
	$smtp_msg =~ s/^/<<< /gm;
	die "$smtp_msg\n[ERR] $_[0]\n";
}

my $recipients_num = 0;
if($get_recipients_from_headers)
{
	my $hdr_recipients = join(",", map {join ",", getheaders($_)} @recipient_headers);
	if($Auto_Qualify)
	{
		local $_ = $hdr_recipients;
		my $new_hdr_recipients = '';
		while(
		 /^(\s*,?\s*<[^>]+)(>)/m or
		 /^(\s*,?\s*[^""''\s\@<>]+\@[^""''\s\@<>]+\s*(?![""''<]))()/m or
		 /^(\s*,?\s*[""].*?[""]\s*<[^>]+)(>)/m or
		 /^(\s*,?\s*[''].*?['']\s*<[^>]+)(>)/m
		)
		{
			my ($left, $right, $remain) = ($1, $2, $');
			if($left !~ /\@/) { $new_hdr_recipients .= $left . '@' . $Maildomain . $right; }
			else { $new_hdr_recipients .= $left.$right; }
			$_ = $remain;
		}
		$hdr_recipients = $new_hdr_recipients . $_;
	}
	@recipients = extract_emailaddr($hdr_recipients);
}
else
{
	if($Auto_Qualify)
	{
		@recipients = map{if(/\@/){ $_; }else{ $_.'@'.$Maildomain; }} @recipients;
	}
}



if ($relay_auto_mx)
{
	eval { use Net::DNS; 1 } or die $@;
	# NOTE: testing only the 1st recipient's email domain.
	# Likely won't work with emails having recipients from multiple different email domain.
	my ($domain_part) = ($recipients[0] =~ /\@(.+)/);
	pinfo "Searching MX for $domain_part\n";
	# TODO: support SRV records
	for my $possible_mx (mx($domain_part))
	{
		my $server = $possible_mx->exchange;
		my $port = (getservbyname 'smtp', 'tcp')[2];
		pinfo "Testing connection to $server:$port\n";
		if(test_tcp_socket($server, $port))
		{
			$Relay_Addr = $server;
			last;
		}
	}
}

if(not $Relay_Addr)
{
	die "No relay address.\n";
}
if($Relay_Addr =~ s/:(\d+)//)
{
	$Relay_Port = $1;
}

pinfo "Connecting to '$Relay_Addr' on port $Relay_Port\n";
$smtp = Net::SMTP->new($Relay_Addr, Port => $Relay_Port, Timeout => 120, ExactAddresses => 1, Debug => $DebugSMTP) or die $@;


if(defined $SMTP_user)
{
	pinfo "Authenticating as '$SMTP_user'\n";
	$smtp->auth($SMTP_user, $SMTP_pass)  or  smtp_die "Authentication";
}
$smtp->mail($MailFrom)  or  smtp_die "MAIL FROM: $MailFrom";

for my $rcpt_to (@recipients)
{
	pinfo "Recipient: $rcpt_to\n";
	$smtp->to($rcpt_to)  or  smtp_die "RCPT TO: $rcpt_to";
	$recipients_num++;
}

if($recipients_num > 0)
{
	$smtp->data()  or  smtp_die "DATA";
	for(@Headers)
	{
		$smtp->datasend(sprintf "%s: %s\r\n", $_->{"name"}, $_->{"value"}) or smtp_die "DATA Header $_->{'name'}";
	}
	$smtp->datasend("\r\n") or smtp_die "DATA EOH";
	if(-t 0)
	{
		pinfo "Reading message body from STDIN...\n";
	}
	my $body_start_pos = tell STDIN;
	my $pos = $body_start_pos;
	my $data_progress_ts = -1;
	while(read STDIN, $_, 4 * 4 * 1024)
	{
		print {$SaveFD} $_ if $SaveFD;
		
		$smtp->datasend($_) or do{
			if($ProgressCounter)
			{
				print STDERR "\r$pos bytes DATA";
				print STDERR "\n";
			}
			smtp_die "DATA Body at byte $pos";
		};
		
		$pos = tell(STDIN) - $body_start_pos;
		
		if($ProgressCounter)
		{
			if($data_progress_ts < time - 1)
			{
				print STDERR "\r$pos bytes DATA";
				$data_progress_ts = time;
			}
		}
	}
	if($ProgressCounter){ print STDERR "\n"; }
	$smtp->dataend()  or  smtp_die "DATA END";
	
	# print the last smtp response line which probably contains the queue id
	printf "%s", ($smtp->message)[-1];
	print STDERR join '', map {local $m = $_; $m =~ s/\n*$//; "$0: <<< $m\n"} $smtp->message;
	$smtp->quit()  or  smtp_die "QUIT";
	pinfo "[OK] Sent.\n";
	
	if($SaveFD)
	{
		close $SaveFD;
		my $SaveFilename = "$SaveSent/$mailid.eml";
		pinfo "saving to $SaveFilename\n";
		system "mv", $SaveTempFilename, $SaveFilename;
	}
}
else
{
	die "[ERR] No recipients.\n";
}

